; Each of these PIO programs
; 1. Initializes the chip with a calibration sequence (16 sck pulses).
; 2. Periodically (2MHz) polls the chip at the max sensor rate
;    and pushes the result into the RX FIFO. SPI clock frequency is 32MHz.
;
; Note: The ADS7029, ADS7039, and ADS7049 differ only in that they have
;   different bit resolutions, which results in a different number of clock
;   pulses and idle time between sensor reads. Programs are basically identical
;   otherwise.


.program ads7029
.side_set 1 opt ; dedicate one side-set pin for SCK.

; Note: autopush must be enabled with the bit resolution value (8).
; Note: clock division must be 2.5f (assuming a 125MHz clock) for the ADS7029.

calibrate:
    set pins, 0         ; CS LOW
    set x, 15           ; Setup number of bits to transfer.
calibrate_sck_pulses:
    nop side_set 1 [3]  ; Sample data on the rising edge.
    nop side_set 0 [2]
    jmp x--, calibrate_sck_pulses
calibrate_cleanup:
    set pins, 1    [7]  ; CS HIGH
    nop[7]
    nop[4]
.wrap_target
data_transfer_setup:
    set pins, 0         ; CS LOW
    nop side_set 1   ; SCK HIGH
    nop side_set 0   ; SCK LOW
    nop side_set 1   ; SCK HIGH
    nop side_set 0      ; SCK LOW
data_transfer:
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
    in pins, 1 side_set 1   ; Sample data on the rising edge.
    nop side_set 0
cleanup:    ; autopush should transfer data.
    set pins, 1 [5]; CS HIGH + 1 clock cycle delay
.wrap


.program ads7039

.program ads7049
.side_set 1 opt ; dedicate one side-set pin for SCK.

; Note: autopush must be enabled with the bit resolution value (12).
; Note: clock division must be 1.0f (assuming a 125MHz clock) for the ADS7049.

calibrate:
    set pins, 0         ; CS LOW
    set x, 15           ; Setup number of bits to transfer.
calibrate_sck_pulses:
    nop side_set 1 [3]  ; Sample data on the rising edge.
    nop side_set 0 [2]
    jmp x--, calibrate_sck_pulses
calibrate_cleanup:
    set pins, 1    [7]  ; CS HIGH
    nop[7]
    nop[4]
.wrap_target
data_transfer_setup:
    set pins, 0    [1]  ; CS LOW +1 clock cycle delay
    nop side_set 1 [1]  ; SCK HIGH +1 clock cycle delay
    nop side_set 0 [1]  ; SCK LOW +1 clock cycle delay
    nop side_set 1 [1]  ; SCK HIGH +1 clock cycle delay
    nop side_set 0      ; SCK LOW
    set x 11
data_transfer:
    nop side_set 1 [1]  ; SCK HIGH
    in pins, 1 side_set 0 ; Sample data on the falling edge. This is what raw
                          ; scope traces suggest doing even though the
                          ; datasheet suggests otherwise.
    jmp x-- data_transfer   ;
cleanup:    ; autopush should transfer data.
    set pins, 1 [3]; CS HIGH + 1 clock cycle delay
.wrap


% c-sdk {
#include "hardware/gpio.h"
static inline void setup_pio_ads7049(PIO pio, uint sm, uint program_offset,
                                     uint cs_pin, uint sck_pin, uint poci_pin)
{
    // Determine which program to run based on data_bits.
    uint data_bits = 12; // Fix data_bits at 12 for now to only support ADS7049.
    pio_sm_config c =
        (data_bits == 8) ?  ads7029_program_get_default_config(program_offset) :
        (data_bits == 10) ? ads7039_program_get_default_config(program_offset) :
                            ads7049_program_get_default_config(program_offset);
    // Setup which commands apply to which pins.
    sm_config_set_set_pins(&c, cs_pin, 1);   // CS pin controlled with SET cmds.
    sm_config_set_in_pins(&c, poci_pin);     // POCI pin read by IN cmd.
    sm_config_set_sideset_pins(&c, sck_pin); // SCK pin controlled with SIDESET cmds.
    // Setup for MSb-first (shift left), enable auto push, autopush threshold = nbits)
    sm_config_set_in_shift(&c, false, true, data_bits);
    float clk_div = (data_bits == 8) ? 2.5f : 1.0f;
    sm_config_set_clkdiv(&c, clk_div); // No clock division.

    // Set specific GPIO pins to be controlled by pio.
    pio_gpio_init(pio, sck_pin);
    pio_gpio_init(pio, poci_pin);
    pio_gpio_init(pio, cs_pin);

    // Set pin directions (1 = output; 0 = input)
    pio_sm_set_pindirs_with_mask(pio, sm,
        (1u << cs_pin) | (1u << sck_pin) | (0u << poci_pin),
        (1u << cs_pin) | (1u << sck_pin) | (1u << poci_pin)
    );
    // Set output pin starting states.
    pio_sm_set_pins_with_mask(pio, sm,
        (1u << cs_pin) | (0u << sck_pin), // starting values
        (1u << cs_pin) | (1u << sck_pin)); // pin mask.

    // We provide the clock, so bypass input synchroniser to reduce input delay.
    hw_set_bits(&pio->input_sync_bypass, 1u << poci_pin);

    pio_sm_init(pio, sm, program_offset, &c);
}

static inline void pio_ads7049_start(PIO pio, uint sm)
{
    // Start state machine.
    pio_sm_set_enabled(pio, sm, true);
}
%}
